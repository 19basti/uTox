stages:
  - build
  - dev_tool
  - test
  - deploy

#
# build
#
build:linux:64:
  stage: build
  cache:
    # keep cache across stages
    key: "$CI_BUILD_REF_NAME/linux"
    paths:
      - cache/
  variables:
    TOXCORE_REPO: "TokTok/c-toxcore"
    GL_BUILD: "lin64"
  before_script:
    - ./extra/gitlab/linux-before.sh
  script:
    - ./extra/gitlab/linux-script.sh
    - cp utox uTox-linux-x64
  artifacts:
    # keep compiled files as artifacts to pass to the test stage
    # remove them after one hour
    expire_in: 1h
    untracked: true

build:linux:muslc:
  stage: build
  tags:
    - alpine-tox
  cache:
    # keep cache across stages
    key: "$CI_BUILD_REF_NAME/linux"
    paths:
      - cache/
  variables:
    TOXCORE_REPO: "TokTok/c-toxcore"
    GL_BUILD: "linMUSL"
  before_script:
    - apk add freetype-dev
    - ./extra/gitlab/linux-before.sh
  script:
    - ./extra/gitlab/linux-script.sh
    - cp utox uTox-muslc-64
    # TODO static build here
  artifacts:
    # keep compiled files as artifacts to pass to the test stage
    # remove them after one hour
    expire_in: 1h
    untracked: true

build:windows:64:
  stage: build
  tags:
    - mingw64
  cache:
    paths:
      - cache/
  variables:
    TOXCORE_REPO: "TokTok/c-toxcore"
    GL_BUILD: "win64"
  before_script:
    - ./extra/gitlab/windows-before.sh
  script:
    - ./extra/gitlab/windows-script.sh
    - cp build_win/utox.exe uTox-Win64.exe
  artifacts:
    paths:
      - uTox-Win64.exe
    expire_in: 6h

build:windows:legacy:
  stage: build
  tags:
    - mingw64
  cache:
    paths:
      - cache/
  variables:
    TOXCORE_REPO: "TokTok/c-toxcore"
    GL_BUILD: "winLEGACY"
  before_script:
    - ./extra/gitlab/windows_legacy-before.sh
  script:
    - ./extra/gitlab/windows_legacy-script.sh
    - cp build_win/utox.exe uTox-Win32-LEGACY.exe
  artifacts:
    paths:
      - uTox-Win32-LEGACY.exe
    expire_in: 6h

build:macos:
  stage: build
  tags:
    - osx
  cache:
    paths:
      - cache/
  script:
    - docker run --rm -u $(id -u):$(id -g) -v $(pwd):/workdir -e CROSS_TRIPLE=x86_64-apple-darwin arch-build ./extra/gitlab/osx-docker.sh
    - ls -la
    - ls -la ./*


#
## Create development zip
#
dev_tool:windows:
  stage: dev_tool
  tags:
    - mingw64
  script:
    - echo "Creating development files for windows"
    - echo "Pulling headers"
    - echo "Pulling libs from build:windows"
    - echo "zipping folder"
    - echo "archving stuff :D"
  only:
    - master
    - tags
    - triggers

#
# test
#
test:linux:
  stage: test
  cache:
    # keep cache across stages
    key: "$CI_BUILD_REF_NAME/linux"
    paths:
      - cache/
  script:
    - ./run_tests.sh
  dependencies:
    - build:linux:64


#
## Deploy
#
deploy:main:
  stage: deploy
  tags:
    - utox.io
  script:
    - echo "Deploying to live server"
  environment:
    name: utox.io
    url: https://utox.io/
  when: manual
  only:
    - master

deploy:nightly:
  stage: deploy
  tags:
    - utox.io
  script:
    - echo "Deploying to live server"
    - pwd
    - ls -la
    - ls -la ../
    - whoami
    - ls -la /srv/http/utox.io/*
  environment:
    name: utox.io
    url: https://utox.io/nightly
  when: manual
  only:
    - master
    - develop
    - deploy
